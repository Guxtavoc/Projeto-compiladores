# Generated from gramaticaC.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,241,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
        15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
        22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,
        26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,
        30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,5,35,202,
        8,35,10,35,12,35,205,9,35,1,36,4,36,208,8,36,11,36,12,36,209,1,37,
        4,37,213,8,37,11,37,12,37,214,1,37,1,37,5,37,219,8,37,10,37,12,37,
        222,9,37,1,38,1,38,1,38,1,38,5,38,228,8,38,10,38,12,38,231,9,38,
        1,38,1,38,1,39,4,39,236,8,39,11,39,12,39,237,1,39,1,39,0,0,40,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,2,0,34,34,92,92,3,0,9,10,13,13,32,32,247,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,
        0,0,3,85,1,0,0,0,5,90,1,0,0,0,7,92,1,0,0,0,9,94,1,0,0,0,11,103,1,
        0,0,0,13,105,1,0,0,0,15,107,1,0,0,0,17,109,1,0,0,0,19,111,1,0,0,
        0,21,113,1,0,0,0,23,115,1,0,0,0,25,121,1,0,0,0,27,123,1,0,0,0,29,
        125,1,0,0,0,31,132,1,0,0,0,33,138,1,0,0,0,35,140,1,0,0,0,37,146,
        1,0,0,0,39,149,1,0,0,0,41,153,1,0,0,0,43,159,1,0,0,0,45,162,1,0,
        0,0,47,165,1,0,0,0,49,168,1,0,0,0,51,171,1,0,0,0,53,176,1,0,0,0,
        55,179,1,0,0,0,57,182,1,0,0,0,59,185,1,0,0,0,61,188,1,0,0,0,63,191,
        1,0,0,0,65,193,1,0,0,0,67,195,1,0,0,0,69,197,1,0,0,0,71,199,1,0,
        0,0,73,207,1,0,0,0,75,212,1,0,0,0,77,223,1,0,0,0,79,235,1,0,0,0,
        81,82,5,105,0,0,82,83,5,110,0,0,83,84,5,116,0,0,84,2,1,0,0,0,85,
        86,5,109,0,0,86,87,5,97,0,0,87,88,5,105,0,0,88,89,5,110,0,0,89,4,
        1,0,0,0,90,91,5,40,0,0,91,6,1,0,0,0,92,93,5,41,0,0,93,8,1,0,0,0,
        94,95,5,35,0,0,95,96,5,105,0,0,96,97,5,110,0,0,97,98,5,99,0,0,98,
        99,5,108,0,0,99,100,5,117,0,0,100,101,5,100,0,0,101,102,5,101,0,
        0,102,10,1,0,0,0,103,104,5,60,0,0,104,12,1,0,0,0,105,106,5,46,0,
        0,106,14,1,0,0,0,107,108,5,62,0,0,108,16,1,0,0,0,109,110,5,123,0,
        0,110,18,1,0,0,0,111,112,5,125,0,0,112,20,1,0,0,0,113,114,5,59,0,
        0,114,22,1,0,0,0,115,116,5,102,0,0,116,117,5,108,0,0,117,118,5,111,
        0,0,118,119,5,97,0,0,119,120,5,116,0,0,120,24,1,0,0,0,121,122,5,
        44,0,0,122,26,1,0,0,0,123,124,5,61,0,0,124,28,1,0,0,0,125,126,5,
        112,0,0,126,127,5,114,0,0,127,128,5,105,0,0,128,129,5,110,0,0,129,
        130,5,116,0,0,130,131,5,102,0,0,131,30,1,0,0,0,132,133,5,115,0,0,
        133,134,5,99,0,0,134,135,5,97,0,0,135,136,5,110,0,0,136,137,5,102,
        0,0,137,32,1,0,0,0,138,139,5,38,0,0,139,34,1,0,0,0,140,141,5,119,
        0,0,141,142,5,104,0,0,142,143,5,105,0,0,143,144,5,108,0,0,144,145,
        5,101,0,0,145,36,1,0,0,0,146,147,5,100,0,0,147,148,5,111,0,0,148,
        38,1,0,0,0,149,150,5,97,0,0,150,151,5,116,0,0,151,152,5,101,0,0,
        152,40,1,0,0,0,153,154,5,102,0,0,154,155,5,97,0,0,155,156,5,116,
        0,0,156,157,5,111,0,0,157,158,5,114,0,0,158,42,1,0,0,0,159,160,5,
        43,0,0,160,161,5,43,0,0,161,44,1,0,0,0,162,163,5,45,0,0,163,164,
        5,45,0,0,164,46,1,0,0,0,165,166,5,43,0,0,166,167,5,61,0,0,167,48,
        1,0,0,0,168,169,5,45,0,0,169,170,5,61,0,0,170,50,1,0,0,0,171,172,
        5,108,0,0,172,173,5,111,0,0,173,174,5,111,0,0,174,175,5,112,0,0,
        175,52,1,0,0,0,176,177,5,124,0,0,177,178,5,124,0,0,178,54,1,0,0,
        0,179,180,5,61,0,0,180,181,5,61,0,0,181,56,1,0,0,0,182,183,5,33,
        0,0,183,184,5,61,0,0,184,58,1,0,0,0,185,186,5,60,0,0,186,187,5,61,
        0,0,187,60,1,0,0,0,188,189,5,62,0,0,189,190,5,61,0,0,190,62,1,0,
        0,0,191,192,5,43,0,0,192,64,1,0,0,0,193,194,5,45,0,0,194,66,1,0,
        0,0,195,196,5,42,0,0,196,68,1,0,0,0,197,198,5,47,0,0,198,70,1,0,
        0,0,199,203,7,0,0,0,200,202,7,1,0,0,201,200,1,0,0,0,202,205,1,0,
        0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,72,1,0,0,0,205,203,1,0,0,
        0,206,208,2,48,57,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,0,
        0,0,209,210,1,0,0,0,210,74,1,0,0,0,211,213,3,73,36,0,212,211,1,0,
        0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,216,1,0,
        0,0,216,220,5,46,0,0,217,219,3,73,36,0,218,217,1,0,0,0,219,222,1,
        0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,76,1,0,0,0,222,220,1,0,
        0,0,223,229,5,34,0,0,224,228,8,2,0,0,225,226,5,92,0,0,226,228,9,
        0,0,0,227,224,1,0,0,0,227,225,1,0,0,0,228,231,1,0,0,0,229,227,1,
        0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,0,232,233,5,
        34,0,0,233,78,1,0,0,0,234,236,7,3,0,0,235,234,1,0,0,0,236,237,1,
        0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,240,6,
        39,0,0,240,80,1,0,0,0,8,0,203,209,214,220,227,229,237,1,6,0,0
    ]

class MicroLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    ID = 36
    NUMERO = 37
    REAL = 38
    STRING = 39
    WS = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'main'", "'('", "')'", "'#include'", "'<'", "'.'", 
            "'>'", "'{'", "'}'", "';'", "'float'", "','", "'='", "'printf'", 
            "'scanf'", "'&'", "'while'", "'do'", "'ate'", "'fator'", "'++'", 
            "'--'", "'+='", "'-='", "'loop'", "'||'", "'=='", "'!='", "'<='", 
            "'>='", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMERO", "REAL", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "ID", "NUMERO", "REAL", "STRING", 
                  "WS" ]

    grammarFileName = "gramaticaC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


